use prettytable::{Cell, Row, Table};

use std::collections::{HashMap, HashSet};
use std::io::{self, Write};

use crate::grammar::Production;
use crate::grammar::Symbol;

pub struct Parser {
    pub(crate) start_symbols: Vec<String>,
    pub(crate) terminals: HashMap<String, String>,
    pub(crate) nonterminals: HashSet<String>,
    pub(crate) table: ParseTable,
}

impl Parser {
    pub fn codegen(&self, mut w: impl Write) -> io::Result<()> {
        let mut terminals: Vec<_> = self
            .terminals
            .keys()
            .map(|term| Symbol::T(term.to_owned()))
            .collect();
        terminals.push(Symbol::EOF);

        let mut table = Table::new();
        let mut row = row!["table"];
        row.extend(terminals.iter().map(|s| s.name()));
        row.extend(self.nonterminals.iter());
        table.add_row(row);
        for (i, (action, goto)) in self.table.0.iter().enumerate() {
            let mut row = row![i];
            row.extend(terminals.iter().map(|term| {
                if let Some(action) = action.get(term) {
                    action.shortname()
                } else {
                    "".to_owned()
                }
            }));
            row.extend(self.nonterminals.iter().map(|nonterm| {
                if let Some(goto) = goto.get(&Symbol::NT(nonterm.to_owned())) {
                    goto.to_string()
                } else {
                    "".to_owned()
                }
            }));
            table.add_row(row);
        }
        table.printstd();

        writeln!(w, "// Code was generated by pgen")?;
        writeln!(w, "use std::io::Read;")?;
        writeln!(w, "use pgen::regex::RegexSet;")?;
        writeln!(w, "const PATTERNS: &[&'static str] = &[")?;
        for regex in self.terminals.values() {
            writeln!(w, "    {:?},", regex)?;
        }
        writeln!(w, "];")?;
        writeln!(w, "pub struct Parser {{")?;
        writeln!(w, "    regex_set: RegexSet,")?;
        writeln!(w, "}}")?;
        writeln!(w, "impl Parser {{")?;
        writeln!(w, "    pub fn new() -> Self {{")?;
        // TODO: check that the RegexSet doesn't fail to compile
        writeln!(
            w,
            "        let regex_set = RegexSet::new(PATTERNS.clone()).unwrap();"
        )?;
        writeln!(w, "        Parser {{ regex_set }}")?;
        writeln!(w, "    }}")?;
        for nonterminal in self.start_symbols.iter() {
            writeln!(
                w,
                "    pub fn parse_{}(&self, input: impl AsRef<str>) {{",
                nonterminal
            )?;
            writeln!(w, "        let input = input.as_ref();")?;
            writeln!(w, "    }}")?;
        }
        writeln!(w, "}}")?;
        Ok(())
    }
}

pub struct ParseTable(pub(crate) Vec<(HashMap<Symbol, Action>, HashMap<Symbol, usize>)>);

pub enum Action {
    Shift(usize),
    Reduce(usize),
    Accept,
    Error,
}

impl Action {
    pub fn shortname(&self) -> String {
        match self {
            Action::Shift(n) => format!("s{}", n),
            Action::Reduce(n) => format!("r{}", n),
            Action::Accept => "acc".to_owned(),
            Action::Error => "".to_owned(),
        }
    }
}
