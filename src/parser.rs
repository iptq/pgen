use prettytable::{Cell, Row, Table};

use std::collections::{HashMap, HashSet};
use std::io::{self, Write};

use crate::grammar::Production;
use crate::grammar::Symbol;

pub struct Parser {
    pub(crate) start_symbols: Vec<String>,
    pub(crate) terminals: HashMap<String, String>,
    pub(crate) nonterminals: HashSet<String>,
    pub(crate) table: ParseTable,
}

impl Parser {
    pub fn codegen(&self, mut w: impl Write) -> io::Result<()> {
        let mut terminals: Vec<_> = self
            .terminals
            .keys()
            .map(|term| Symbol::T(term.to_owned()))
            .collect();
        terminals.push(Symbol::EOF);

        let n_states = self.table.0.len();

        let mut table = Table::new();
        let mut row = row!["table"];
        row.extend(terminals.iter().map(|s| s.name()));
        row.extend(self.nonterminals.iter());
        table.add_row(row);
        for (i, (action, goto)) in self.table_iter() {
            let mut row = row![i];
            row.extend(terminals.iter().map(|term| {
                if let Some(action) = action.get(term) {
                    action.shortname()
                } else {
                    "".to_owned()
                }
            }));
            row.extend(self.nonterminals.iter().map(|nonterm| {
                if let Some(goto) = goto.get(&Symbol::NT(nonterm.to_owned())) {
                    goto.to_string()
                } else {
                    "".to_owned()
                }
            }));
            table.add_row(row);
        }
        table.printstd();

        // header
        writeln!(w, "// Code was generated by pgen")?;
        writeln!(w, "use std::io::Read;")?;
        writeln!(w, "use pgen::regex::RegexSet;")?;

        // write patterns for the lexer
        writeln!(w, "const PATTERNS: &[&'static str] = &[")?;
        for regex in self.terminals.values() {
            writeln!(w, "    {:?},", regex)?;
        }
        writeln!(w, "];")?;

        // write actions table
        writeln!(w, "const ACTIONS: &[[i8;{}]] = &[", terminals.len())?;
        for (i, (action, _)) in self.table_iter() {
            write!(w, "    [")?;
            for terminal in terminals.iter() {
                if let Some(action) = action.get(&terminal) {
                    write!(w, "{},", action.code(n_states))?;
                } else {
                    write!(w, "-2,")?;
                }
            }
            writeln!(w, "],")?;
        }
        writeln!(w, "];")?;

        // write gotos table
        writeln!(w, "const GOTOS: &[[i8;{}]] = &[", self.nonterminals.len())?;
        for (i, (_, goto)) in self.table_iter() {
            write!(w, "    [")?;
            for nonterminal in self.nonterminals.iter() {
                if let Some(goto) = goto.get(&Symbol::NT(nonterminal.to_owned())) {
                    write!(w, "{},", goto)?;
                } else {
                    write!(w, "-1,")?;
                }
            }
            writeln!(w, "],")?;
        }
        writeln!(w, "];")?;

        // main parser struct
        writeln!(w, "pub struct Parser<'a> {{")?;
        writeln!(w, "    regex_set: RegexSet,")?;
        writeln!(w, "    position: usize,")?;
        writeln!(w, "    input: &'a str,")?;
        writeln!(w, "}}")?;
        writeln!(w, "impl<'a> Parser<'a> {{")?;
        writeln!(w, "    pub fn new(input: &'a str) -> Self {{")?;
        // TODO: check that the RegexSet doesn't fail to compile
        writeln!(
            w,
            "let regex_set = RegexSet::new(PATTERNS.clone()).unwrap();"
        )?;
        writeln!(
            w,
            "Parser {{ input: input.as_ref(), regex_set, position: 0 }}"
        )?;
        writeln!(w, "}}")?;
        for nonterminal in self.start_symbols.iter() {
            writeln!(w, "pub fn parse_{}(&mut self) {{", nonterminal)?;
            writeln!(w, "self.generic_parse(0)")?;
            writeln!(w, "}}")?;
        }
        writeln!(
            w,
            "    fn generic_parse(&mut self, starting_state: usize) {{"
        )?;
        writeln!(w, "    self.position = 0;")?;
        writeln!(w, "    loop {{")?;
        writeln!(w, "    ")?;
        writeln!(w, "}}")?;
        writeln!(w, "}}")?;
        writeln!(w, "}}")?;
        Ok(())
    }

    fn table_iter(
        &self,
    ) -> impl Iterator<Item = (usize, &(HashMap<Symbol, Action>, HashMap<Symbol, usize>))> + '_
    {
        self.table.0.iter().enumerate()
    }
}

pub struct ParseTable(pub(crate) Vec<(HashMap<Symbol, Action>, HashMap<Symbol, usize>)>);

pub enum Action {
    Shift(usize),
    Reduce(usize),
    Accept,
}

impl Action {
    pub fn shortname(&self) -> String {
        match self {
            Action::Shift(n) => format!("s{}", n),
            Action::Reduce(n) => format!("r{}", n),
            Action::Accept => "acc".to_owned(),
        }
    }

    pub fn code(&self, n_states: usize) -> i8 {
        match self {
            Action::Shift(n) => *n as i8,
            Action::Reduce(n) => (n_states as i8) + (*n as i8),
            Action::Accept => -1,
        }
    }
}
