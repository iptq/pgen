// Code was generated by pgen
use pgen::regex::RegexSet;
use std::io::Read;
const PATTERNS: &[&'static str] = &["\\(", "\\+", "\\*", "\\)", "\\d+"];
const ACTIONS: &[[i8; 6]] = &[
    [0, -2, -2, -2, 10, -2],
    [0, -2, -2, -2, 10, -2],
    [-2, 4, -2, -2, -2, -2],
    [-2, -2, -2, -2, -2, -2],
    [0, -2, -2, -2, 10, -2],
    [-2, -2, 9, -2, -2, -2],
    [-2, -2, -2, -2, -2, -2],
    [-2, 4, -2, -2, -2, -2],
    [-2, -2, -2, -2, -2, -2],
    [0, -2, -2, -2, 10, -2],
    [-2, -2, -2, -2, 18, -2],
    [-2, -2, -2, 12, -2, -2],
    [-2, -2, -2, 17, -2, -2],
    [-2, -2, 9, -2, -2, -2],
    [-2, -2, -2, -2, -2, -2],
    [-2, -2, -2, -2, -2, -1],
];
const GOTOS: &[[i8; 5]] = &[
    [-1, -1, 2, 11, 5],
    [-1, -1, 2, 15, 5],
    [3, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, 7, -1, 5],
    [-1, 6, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [8, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, 13],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, 14, -1, -1, -1],
    [-1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1],
];
pub struct Parser<'a> {
    regex_set: RegexSet,
    position: usize,
    input: &'a str,
}
impl<'a> Parser<'a> {
    pub fn new(input: &'a str) -> Self {
        let regex_set = RegexSet::new(PATTERNS.clone()).unwrap();
        Parser {
            input: input.as_ref(),
            regex_set,
            position: 0,
        }
    }
    pub fn parse_E(&mut self) {
        self.generic_parse(0)
    }
    fn generic_parse(&mut self, starting_state: usize) {
        self.position = 0;
        loop {}
    }
}
